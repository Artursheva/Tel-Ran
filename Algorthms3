dp[i][j] = costs[i][j] + min(dp[i-1][j], dp[i][j-1])


function minCostPath(costs) {
  const N = costs.length;
  const M = costs[0].length;
  
  const dp = new Array(N).fill().map(() => new Array(M));
  
  dp[0][0] = costs[0][0];
  
  for (let i = 1; i < N; i++) {
    dp[i][0] = dp[i - 1][0] + costs[i][0];
  }
  
  for (let j = 1; j < M; j++) {
    dp[0][j] = dp[0][j - 1] + costs[0][j];
  }
  
  for (let i = 1; i < N; i++) {
    for (let j = 1; j < M; j++) {
      dp[i][j] = costs[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1]);
    }
  }
  
  return dp[N - 1][M - 1];
}

// Пример использования
const costs = [
  [1, 3, 1],
  [2, 5, 1],
  [6, 2, 4]
];

const result = minCostPath(costs);
console.log(result); // Вывод: 8
